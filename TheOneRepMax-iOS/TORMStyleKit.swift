//
//  TORMStyleKit.swift
//  TheOneRepMax
//
//  Created by Jonah Witcig on 8/15/16.
//  Copyright (c) 2016 JwitApps. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class TORMStyleKit : NSObject {

    //// Drawing Methods

    public class func drawCanvas1(strokeWidth strokeWidth: CGFloat = 2, fraction: CGFloat = 1, containerFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), handleSize: CGSize = CGSize(width: 34, height: 34)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let backgroundOvalFill = UIColor(red: 0.514, green: 0.513, blue: 0.513, alpha: 0.334)
        let backgroundOvalStroke = backgroundOvalFill.colorWithAlphaComponent(1)
        let percentageOvalFill = UIColor(red: 0.585, green: 0.892, blue: 0.517, alpha: 1.000)
        let gradientColor = UIColor(red: 0.515, green: 0.515, blue: 0.515, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [percentageOvalFill.CGColor, gradientColor.CGColor], [0, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor()
        shadow.shadowOffset = CGSize(width: 3.1, height: 3.1)
        shadow.shadowBlurRadius = 5

        //// Variable Declarations
        let degreesExpression: CGFloat = 90 - 360 * fraction
        let handlePositionOffsetExpression: CGFloat = containerFrame.size.height / 2.0 - handleSize.width / 2.0
        let handleXPositionExpression: CGFloat = handlePositionOffsetExpression + cos(degreesExpression * CGFloat(M_PI)/180) * (containerFrame.size.width / 2.0 - 20)
        let handleYPositionExpression: CGFloat = handlePositionOffsetExpression - sin(degreesExpression * CGFloat(M_PI)/180) * (containerFrame.size.width / 2.0 - 20)
        let handlePosition = CGPoint(x: handleXPositionExpression, y: handleYPositionExpression)

        //// Frames
        let frame = CGRect(x: containerFrame.origin.x, y: containerFrame.origin.y, width: containerFrame.size.width, height: containerFrame.size.height)


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: frame.minX + 20, y: frame.minY + 20, width: frame.width - 40, height: frame.height - 40))
        backgroundOvalFill.setFill()
        oval2Path.fill()
        backgroundOvalStroke.setStroke()
        oval2Path.lineWidth = strokeWidth
        oval2Path.stroke()


        //// Oval Drawing
        let ovalRect = CGRect(x: frame.minX + 20, y: frame.minY + 20, width: frame.width - 40, height: frame.height - 40)
        let ovalPath = UIBezierPath()
        ovalPath.addArcWithCenter(CGPoint(x: ovalRect.midX, y: ovalRect.midY), radius: ovalRect.width / 2, startAngle: -90 * CGFloat(M_PI)/180, endAngle: -degreesExpression * CGFloat(M_PI)/180, clockwise: true)
        ovalPath.addLineToPoint(CGPoint(x: ovalRect.midX, y: ovalRect.midY))
        ovalPath.closePath()

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)
        ovalPath.addClip()
        CGContextDrawLinearGradient(context, gradient,
            CGPoint(x: ovalRect.midX, y: ovalRect.minY),
            CGPoint(x: ovalRect.midX, y: ovalRect.maxY),
            CGGradientDrawingOptions())
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        ovalPath.lineWidth = strokeWidth
        ovalPath.stroke()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalInRect: CGRect(x: handlePosition.x, y: handlePosition.y, width: handleSize.width, height: handleSize.height))
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        UIColor.whiteColor().setFill()
        oval3Path.fill()
        CGContextRestoreGState(context)

        UIColor.blackColor().setStroke()
        oval3Path.lineWidth = strokeWidth
        oval3Path.stroke()
    }

}
